import * as _ from 'lamb';
import {
	isObject,
	isString,
	makePostfixed,
	applyFnMap
} from '@svizzle/utils';

/*
This file is imported by `src/bin/make_data.js`
so we can't import files generated by it like `data/datasets.json` in here
*/

/*
This file is imported by `src/bin/make_data.js`
so we can't import files generated by it like `data/datasets.json` in here
*/

export const getSource = _.getKey('source');
export const getSpecVersion = _.getKey('version');
export const getApiVersion = _.getPath('spec.dataset.api_version');
export const getSchema = _.getPath('spec.dataset.schema');
export const getEndpointURL = _.getPath('spec.dataset.endpoint_url');
export const getSearchURL = _.pipe([getEndpointURL, makePostfixed('/_search')]);
export const getFieldTypeId = _.getKey('type');
export const getESType = _.adapter([
	_.casus(isObject, getFieldTypeId),
	_.casus(isString, _.identity),
	_.always('unknown')
]);

// e.g. `arxlive_arxiv_v3`
export const getDatasetIdOf =
	({project, source, version}) => `${project}_${source}_v${version}`;

export const groupBySource = _.groupBy(getSource);

export const makeDatasetBySource = _.pipe([
	_.groupBy(getSource),
	_.mapValuesWith(_.sortWith([_.getKey('project'), getSpecVersion])),
	_.values,
	_.sortWith([getSource]),
	_.mapWith(applyFnMap({
		source: _.getPath('0.source'),
		releases: _.sortWith([getSpecVersion])
	}))
]);

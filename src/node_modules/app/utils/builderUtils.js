import * as _ from 'lamb';
import {
	// enumsOf,
	extractBaseType,
	getArrayCellType,
	is_array,
	is_enums,
	is_intWithUnit,
	is_native,
	is_object,
	is_xor,
} from 'app/elasticsearch/types/genericTypes'
// import { makeStartsWith } from '@svizzle/utils';
import { getKeyOf } from 'app/utils/generic';

import ArrayEditor from 'app/components/elementary/ArrayEditor.svelte';
import BooleanRadios from 'app/components/elementary/BooleanRadios.svelte';
import EsGeoPointObj from 'app/components/elementary/EsGeoPointObj.svelte';
import ExistenceEditor from 'app/components/elementary/ExistenceEditor.svelte';
import MinMax from 'app/components/elementary/MinMax.svelte';
import ObjectEditor from 'app/components/elementary/ObjectEditor.svelte';
import RadioList from 'app/components/elementary/RadioList.svelte';
import SimpleField from 'app/components/elementary/SimpleField.svelte';

const typeEditors = {
	'boolean': {
		component: BooleanRadios
	},
	'integer': {
		component: SimpleField,
		props: {
			type: 'number',
			dataType: 'integer'
		}
	},
	'float': {
		component: SimpleField,
		props: {
			type: 'number',
			dataType: 'float'
		}
	},
	'ES_keyword': {
		component: SimpleField,
		props: {
			type: 'text',
			dataType: 'ES_keyword'
		}
	},
	'ES_text': {
		component: SimpleField,
		props: {
			type: 'text',
			dataType: 'ES_text'
		}
	},
	'ES_text_w_keyword': {
		component: SimpleField,
		props: {
			type: 'text',
			dataType: 'ES_text_w_keyword'
		}
	},
	'string': {
		component: SimpleField,
		props: {
			type: 'text',
			dataType: 'string'
		}
	},
	'date': {
		component: SimpleField,
		props: {type: 'date'}
	},
	'Date_YYYYMMDD_dash': {
		component: SimpleField,
		props: {
			type: 'date',
			dataType: 'Date_YYYYMMDD_dash'
		}
	},
	'Date_YYYYMMDD_dash_time': {
		component: SimpleField,
		props: {
			type: 'date',
			dataType: 'Date_YYYYMMDD_dash'
		}
	},
	'MinMax<integer>': {
		component: MinMax,
		props: {
			dataType: 'integer'
		}
	},
	'MinMax<float>': {
		component: MinMax,
		props: {
			dataType: 'float'
		}
	},
	'ES_geo_point_obj': {
		component: EsGeoPointObj,
		props: {
			type: 'number',
			dataType: 'float'
		}
	},
	'Existence': {
		component: ExistenceEditor,
		props: {
			dataType: 'Existence'
		}
	},
};

const makeEditor = component => props => ({component, props});
const unionEditor = makeEditor(RadioList);
const arrayEditor = makeEditor(ArrayEditor);
const simpleEditor = makeEditor(SimpleField);
const objectEditor = makeEditor(ObjectEditor);

/*
const getMemberParams = _.pipe([
	_.keys,
	_.filterWith(_.not(makeStartsWith('__')))
]);
const enumSelection = _.pipe([
	getMemberParams,
	type => enumsOf(type, type[0], true)
]);
*/

const configNativeEditor = _.pipe([
	extractBaseType,
	getKeyOf(typeEditors)
])
const configEnumsEditor = type => unionEditor({
	typeObject: type.values
});
const configArrayEditor = type => arrayEditor({
	// eslint-disable-next-line no-use-before-define
	fieldEditor: getEditor(type)
});
const configArrayObjectEditor = _.pipe([
	getArrayCellType,
	configArrayEditor
]);
const configObjectEditor = type => objectEditor({
	typeObject: type
});
/*
const configXorObjectEditor = type => objectEditor({
	typeObject: {
		selection: enumSelection(type),
		...type
	}
});
*/
const configJsonEditor = type => simpleEditor({
	type: 'json',
	typeObject: type
});

export const getEditor = _.adapter([
	_.casus(is_native, configNativeEditor),
	_.casus(is_enums, configEnumsEditor),
	_.casus(is_array, configArrayObjectEditor),
	_.casus(is_xor, configObjectEditor),
	_.casus(is_object, configObjectEditor),
	_.casus(is_intWithUnit, configObjectEditor),
	configJsonEditor
]);

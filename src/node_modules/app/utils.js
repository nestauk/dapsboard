import * as _ from 'lamb';
// eslint-disable-next-line node/no-unpublished-import
import { applyFnMap } from '@svizzle/utils';
import { getESType } from 'app/elasticsearch';

export { version } from '../../../package.json';

const getSource = _.getKey('source');
const getVersion = _.getKey('version');

export const indexById = _.indexBy(_.getKey('id'));

export const makeDatasetBySource = _.pipe([
	_.groupBy(getSource),
	_.mapValuesWith(_.sortWith([_.getKey('project'), getVersion])),
	_.values,
	_.sortWith([getSource]),
	_.mapWith(applyFnMap({
		source: _.getPath('0.source'),
		releases: _.sortWith([getVersion])
	}))
]);

export const IS_BROWSER = process.browser;

export const getSchema = _.getPath('spec.dataset.schema');
export const getEndpointURL = _.getPath('spec.dataset.endpoint_url');

let lastId = 0;
export function autoID () {
	return `${IS_BROWSER ? 'client' : 'server'}${lastId++}`;
}

const createPropDefs = _.mapWith(([field, EStype]) => `	${field}: ${EStype};`);

const createTypeDef = ([datasetId, fieldEStypePairs]) => `export type ${datasetId} = {
	${createPropDefs(fieldEStypePairs).join('\n')}
};
`;

export const generateTypingsForAll = _.pipe([
	indexById,
	_.mapValuesWith(_.pipe([
		getSchema,
		_.mapValuesWith(getESType),
		_.pairs,
	])),
	_.pairs,
	_.mapWith(createTypeDef)
]);

/* URL parsing */

export const descentReducer = (hasChildren, getChildren) => {
	const reducer = _.curryable((reducerFn, init, node) => {
		const acc = reducerFn(init, node);
		if (!hasChildren(node)) {
			return acc;
		}
		return getChildren(node).reduce(reducer(reducerFn), acc);
	});
	return reducer;
}

const transformAggregation = applyFnMap({
	name: _.getAt(0),
	aggregation: _.pipe([
		_.getAt(1),
		_.skipKeys(['aggs']),
		_.pairs,
		_.getPath('0.0'),
	]),
	field: _.pipe([
		_.getAt(1),
		_.skipKeys(['aggs']),
		_.pairs,
		_.getPath('0.1'),
		_.getKey('field')
	]),
	params: _.pipe([
		_.getAt(1),
		_.skipKeys(['aggs']),
		_.pairs,
		_.getPath('0.1'),
		_.skipKeys(['field'])
	]),
	subaggs: _.pipe([
		_.getAt(1),
		_.case(
			_.hasKey('aggs'),
			_.pipe([
				_.pickKeys(['aggs']),
				_.pairs,
				_.getPath('0.1'),
				_.keys,
			])
		)
	]),
});

const hasSubAggs = _.pipe([
	_.getAt(1),
	_.hasKey('aggs'),
]);

const getSubAggs = _.pipe([
	_.getPath('1.aggs'),
	_.pairs,
])

const transformAndAppendAggs = (total, pair) => [
	...total,
	transformAggregation(pair)
];

export const makeIntermediateObj = applyFnMap({
	size: _.getPath('size'),
	aggs: _.pipe([
		_.getPath('aggs'),
		_.pairs,
		_.getAt(0),
		descentReducer(hasSubAggs, getSubAggs)(transformAndAppendAggs, []),
	])
});

import * as _ from 'lamb';
import { applyFnMap} from '@svizzle/utils';
// eslint-disable-next-line node/no-unpublished-import
import { tapValue } from '@svizzle/dev';
import { getESType } from 'app/elasticsearch';

export { version } from '../../../package.json';

const getSource = _.getKey('source');
const getVersion = _.getKey('version');

export const indexById = _.indexBy(_.getKey('id'));

export const makeDatasetBySource = _.pipe([
	_.groupBy(getSource),
	_.mapValuesWith(_.sortWith([_.getKey('project'), getVersion])),
	_.values,
	_.sortWith([getSource]),
	_.mapWith(applyFnMap({
		source: _.getPath('0.source'),
		releases: _.sortWith([getVersion])
	}))
]);

export const IS_BROWSER = process.browser;

export const getSchema = _.getPath('spec.dataset.schema');
export const getEndpointURL = _.getPath('spec.dataset.endpoint_url');

let lastId = 0;
export function autoID () {
	return `${IS_BROWSER ? 'client' : 'server'}${lastId++}`;
}

const createPropDefs = _.mapWith(([field, EStype]) => `	${field}: ${EStype};`);

const createTypeDef = ([datasetId, fieldEStypePairs]) => `export type ${datasetId} = {
	${createPropDefs(fieldEStypePairs).join('\n')}
};
`;

export const generateTypingsForAll = _.pipe([
	indexById,
	_.mapValuesWith(_.pipe([
		getSchema,
		_.mapValuesWith(getESType),
		_.pairs,
	])),
	_.pairs,
	_.mapWith(createTypeDef)
]);

/* URL parsing */

export const makeIntermediateObj = _.pipe([
	applyFnMap({
		resultSize: _.getPath('query.size'),
		dataset: _.getKey('dataset'),
		aggs: _.pipe([
			_.getPath('query.aggs'),
			tapValue(0),

			// _.collect([
			_.pipe([
				_.skipKeys(['aggs']),
				tapValue(1),
				applyFnMap({
					name: _.pipe([
						_.pairs,
						_.getPath('0.0'),
					]),
					aggregation: _.pipe([
						_.pairs,
						_.getPath('0.1'),
						_.pairs,
						_.getPath('0.0'),
					]),
					field: _.pipe([
						_.pairs,
						_.getPath('0.1'),
						_.pairs,
						_.getPath('0.1'),
						_.getKey('field')
					]),
					params: _.pipe([
						_.pairs,
						_.getPath('0.1'),
						_.pairs,
						_.getPath('0.1'),
						_.skipKeys(['field'])
					]),
				}),
				tapValue(2),
			]),
			// _.pickKeys(['aggs']),
			// ]),

			// _.reduceWith((acc, ([key, obj])) => {
			// 	acc.aggs = obj.aggs;
			// 	acc.result = acc.result.concat(foo)
			// 	return acc;
			// }, {result: , aggs: })
		])
	}),
	tapValue('actual'),
]);

import * as _ from 'lamb';
import {applyFnMap} from '@svizzle/utils';
import {getESType} from 'app/elasticsearch';

export {version}  from '../../../package.json';

const getSource = _.getKey('source');
const getVersion = _.getKey('version');

export const indexById = _.indexBy(_.getKey('id'));

export const makeDatasetBySource = _.pipe([
	_.groupBy(getSource),
	_.mapValuesWith(_.sortWith([_.getKey('project'), getVersion])),
	_.values,
	_.sortWith([getSource]),
	_.mapWith(applyFnMap({
		source: _.getPath('0.source'),
		releases: _.sortWith([getVersion])
	}))
]);

export const IS_BROWSER = process.browser;

export const getSchema = _.getPath('spec.dataset.schema');
export const getEndpointURL = _.getPath('spec.dataset.endpoint_url');

export function capitalize (string) {
	return string[0].toUpperCase() + string.slice(1);
}

let lastId = 0;
export function autoID () {
	return `${IS_BROWSER ? 'client' : 'server'}${lastId++}`;
}

const createPropDefs = _.pipe([
	_.mapWith(property => `	${property[0]}: ${property[1]};`)
])

const createTypeDef = v => `export type ${v[0]} = {
${createPropDefs(v[1]).join('\n')}
};
`;

export const generateTypingsForAll = _.pipe([
	indexById,
	_.mapValuesWith(_.pipe([
		getSchema,
		_.mapValuesWith(getESType),
		_.pairs,
	])),
	_.pairs,
	_.mapWith(createTypeDef)
])

function ts () {
	return window.ts;
}

const LIBDTS = `// Standard types
interface Date {}

type Record<K extends keyof any, T> = {
    [P in K]: T;
};`;

const servicesHost = files => ({
	getScriptFileNames: () => Object.keys(files),
	getScriptVersion: () => "0",
	getScriptSnapshot: fileName => {
		let scriptSnapshot;
		
		if (fileName in files) {
			scriptSnapshot = ts().ScriptSnapshot.fromString(files[fileName]);
		} else if (fileName === 'lib.d.ts') {
			scriptSnapshot = ts().ScriptSnapshot.fromString(LIBDTS);
		}
		
		return scriptSnapshot;
	},
	getCurrentDirectory: () => '/',
	getCompilationSettings: () => ({}),
	getDefaultLibFileName: () => 'lib.d.ts',
	fileExists: fileName => fileName in Object.keys(files),
	readFile: () => {
		throw new Error("readFile is not implemented");
	},
	readDirectory: () => []
});

const FILENAME = 'source.ts';
export function getCompletions (
	source,
	position
) {
	const host = servicesHost({[FILENAME]: source});
	const service = ts().createLanguageService(host, ts().createDocumentRegistry());
	const completions = service.getCompletionsAtPosition(FILENAME, position, {});
	return completions && completions.entries.map(completionData => {
		const details = service.getCompletionEntryDetails(FILENAME, position, completionData.name);
		return {
			name: completionData.name,
			displayText: details.displayParts.map(part => part.text).join('')
		};
	})
}

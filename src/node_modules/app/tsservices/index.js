function getTS () {
	return window.ts;
}

const LIBDTS = `// Standard types
interface Date {}

type Record<K extends keyof any, T> = {
    [P in K]: T;
};`;

export const createServicesHost = (ts, files, libdts) => ({
	getScriptFileNames: () => Object.keys(files),
	getScriptVersion: () => "0",
	getScriptSnapshot: fileName => {
		let scriptSnapshot;

		if (fileName in files) {
			scriptSnapshot = ts.ScriptSnapshot.fromString(files[fileName]);
		} else if (fileName === 'lib.d.ts') {
			scriptSnapshot = ts.ScriptSnapshot.fromString(libdts);
		}

		return scriptSnapshot;
	},
	getCurrentDirectory: () => '/',
	getCompilationSettings: () => ({}),
	getDefaultLibFileName: () => 'lib.d.ts',
	fileExists: fileName => fileName in Object.keys(files),
	readFile: () => {
		throw new Error("readFile is not implemented");
	},
	readDirectory: () => []
});

const FILENAME = 'source.ts';
export function getCompletions (
	source,
	position
) {
	const ts = getTS();
	const host = createServicesHost(ts, {[FILENAME]: source}, LIBDTS);
	const service = ts.createLanguageService(host, ts.createDocumentRegistry());
	const completions = service.getCompletionsAtPosition(FILENAME, position, {});
	return completions && completions.entries.map(completionData => {
		const details = service.getCompletionEntryDetails(FILENAME, position, completionData.name);
		return {
			name: completionData.name,
			displayText: details.displayParts.map(part => part.text).join('')
		};
	})
}

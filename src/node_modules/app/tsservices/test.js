"use strict";
exports.__esModule = true;
var ts = require("typescript");
var testsrc_1 = require("./testsrc");
var LIBDTS = "// Standard types\ninterface Date {}\n\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n";
var srcname = "mysrc.ts";
var host = createLanguageServiceHost(srcname, testsrc_1.src);
var service = ts.createLanguageService(host, ts.createDocumentRegistry());
var semDiags = service.getSemanticDiagnostics(srcname);
console.log(semDiags);
var synDiags = service.getSyntacticDiagnostics(srcname);
console.log(synDiags);
var position = testsrc_1.src.lastIndexOf('{') + 1;
var _loop_1 = function (p) {
    try {
        console.log(testsrc_1.src.slice(testsrc_1.src.slice(0, p).lastIndexOf('\n'), p));
        var info = service.getCompletionsAtPosition(srcname, p, {
        //includeCompletionsWithInsertText: true,
        //includeInsertTextCompletions: true,
        //includeExternalModuleExports: true,
        //includeAutomaticOptionalChainCompletions: true
        });
        //console.log(info && info.entries.map(i => i.name).join(', '));
        console.log(info && info.entries.map(function (i) {
            var details = service.getCompletionEntryDetails(srcname, p, i.name, undefined, undefined, undefined);
            var displayText = details.displayParts.map(function (i) { return i.text; }).join('');
            return details.name + " -> " + displayText;
        }));
        //console.log(info && info.entries);
    }
    catch (e) {
        console.log(e);
    }
};
for (var p = position - 20; p < testsrc_1.src.length; p++) {
    _loop_1(p);
}
function createLanguageServiceHost(name, source) {
    var files = [name];
    return {
        getScriptFileNames: getScriptFileNames,
        getScriptVersion: getScriptVersion,
        getScriptSnapshot: getScriptSnapshot,
        getCurrentDirectory: getCurrentDirectory,
        getCompilationSettings: getCompilationSettings,
        getDefaultLibFileName: getDefaultLibFileName,
        fileExists: fileExists,
        readFile: readFile,
        readDirectory: readDirectory
    };
    function getScriptFileNames() {
        return files;
    }
    function getScriptVersion(path) {
        return "0";
    }
    function getScriptSnapshot(fileName) {
        if (fileName === name) {
            return ts.ScriptSnapshot.fromString(source);
        } /*
        else if (fileName === 'lib.d.ts') {
            return ts.ScriptSnapshot.fromString(LIBDTS);
        }*/
        return undefined;
    }
    function getCurrentDirectory() {
        return '/';
    }
    function getCompilationSettings() {
        // typeRoots here is no-op:
        // We may need to implement resolveTypeReferenceDirectives?
        return {};
    }
    function getDefaultLibFileName(options) {
        return 'lib.d.ts';
    }
    function fileExists(path) {
        return path in files;
    }
    function readFile(path, encoding) {
        throw new Error("readFile is not implemented");
    }
    function readDirectory(path, extensions, exclude, include, depth) {
        return [];
    }
}
exports["default"] = service;

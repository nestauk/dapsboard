import * as _ from 'lamb';
import {
	hasIterableLength1,
	isArray,
	isFunction,
	isObject,
	isString,
	makeEndsWith,
	makeStartsWith,
	valuesWith,
} from '@svizzle/utils';

export const equalsJson = _.is('json');
export const hasLegacyName = _.hasKey('__legacyName');
export const hasRecord = _.hasKey('__record');
export const isArrayObject = _.hasKey('__array');
export const isArrayString = _.allOf([isString, makeEndsWith('[]')]);
export const isRequired = _.not(_.allOf([isArray, _.contains('undefined')]));
export const isStringLiteral = _.allOf([isString, makeStartsWith('"')]);
export const isStringLiteralUnion = _.allOf([
	isArray,
	_.every(_.anyOf([
		_.is('undefined'),
		isStringLiteral
	]))
]);

function getDisplayType (fullType, indentation = 0) {
	if (isString(fullType)) {
		return fullType;
	}
	if (isArray(fullType)) {
		return fullType
		.filter(type => type !== 'undefined')
		.map(type => getDisplayType(type, indentation + 1))
		.join(' | ');
	}
	if (isObject(fullType)) {
		if (isArrayObject(fullType)) {
			return `${getDisplayType(fullType.__array, indentation + 1)}[]`;
		}
		if (hasLegacyName(fullType)) {
			return fullType.__legacyName;
		}
		const paramNames = Object.keys(fullType);
		const result = paramNames
		.map(name => {
			return `${'\t'.repeat(indentation)}${name}: ${getDisplayType(fullType[name], indentation + 1)};`;
		})
		.join('\n');
		return ['{\n', result, '\n', '\t'.repeat(indentation >= 1 ? indentation - 1 : 0), '}'].join('');
	}
	return '';
}

export const getParamInfo = valuesWith(
	(paramType, name) => ({
		name,
		type: paramType,
		required: isRequired(paramType),
		displayText: getDisplayType(paramType),
	})
);

const revealTypeWith = defaults => _.pipe([
	_.pull(defaults),
	_.when(hasIterableLength1, _.head)
]);
const revealType = revealTypeWith(['undefined']);

export const extractBaseType = _.when(isArray, revealType);

export const getTypings = _.pipe([
	extractBaseType,
	getParamInfo,
	_.sortWith([_.getKey('required')])
]);

export const evaluate = type => _.when(isFunction, _.applyTo([type]));

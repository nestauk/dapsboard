import assert from 'assert';
import * as _ from 'lamb';
import { evaluate } from './utils';
import { docsByParamByAgg, paramsByAggs } from './config';

const getParams = _.mapWith(([key, definition]) => [key, _.keys(definition)]);

const excludeParams = params => _.pipe([
	_.mapWith(([key, definition]) => [key, _.pull(params)(definition)])
]);
const intersectParams = params => _.filterWith(agg => _.isIn(agg[1], params));
const getAggs = _.mapWith(_.getAt(0));

const getTypedParams = _.pipe([
	_.pairs,
	_.mapWith(([key, definition]) => [key, evaluate('dummy')(definition)]),
]);

const typedParams = getTypedParams(paramsByAggs);

describe('elasticsearch/config.js', function () {

	describe('Ensure all aggregations are documented.', function () {
		it('should have one doc entry per aggregation', function () {
			const expected = getAggs(typedParams);
			const actual = getAggs(intersectParams('__docs')(
				getParams(_.pairs(docsByParamByAgg))
			));

			assert.deepStrictEqual(actual, expected);
		});
	});

	describe('Ensure all top level aggregation parameters are documented.', function () {
		it('should have one doc entry per parameter', function () {
			const expected = excludeParams(['field'])(
				getParams(typedParams)
			);
			const actual = excludeParams(['__docs'])(
				getParams(_.pairs(docsByParamByAgg))
			);

			assert.deepStrictEqual(actual, expected);
		});
	});

});

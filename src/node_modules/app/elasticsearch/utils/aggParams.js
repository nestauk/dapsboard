import * as _ from 'lamb';
import {
	// hasIterableLength1,
	// isArray,
	// isObject,
	// isString,
	// makeEndsWith,
	makeMergeAppliedFnMap,
	// makeStartsWith,
	valuesWith,
} from '@svizzle/utils';

import {
	is_required
} from 'app/elasticsearch/types/esTypes/params.utils';

import aggParamsDefaults from 'app/elasticsearch/config/aggParamsDefaults';
// import {aggParamShapeByAggId} from 'app/elasticsearch/config/aggParamShapeByAggId';
import aggParamsShapeByFieldtypeByAggId from 'app/elasticsearch/config/aggParamsShapeByFieldtypeByAggId.js';
import aggParamDocByAggId from 'app/elasticsearch/config/aggParamDocByAggId';
// import {evaluate} from 'app/utils/generic';

/*
const hasLegacyName = _.hasKey('__legacyName');
const isRequired = _.not(_.allOf([isArray, _.contains('undefined')]));
const isStringLiteral = _.allOf([isString, makeStartsWith('"')]);

export const equalsJson = _.is('json');
export const hasRecord = _.hasKey('__record');
export const hasUnits = _.hasKey('__units');
export const isArrayObject = _.hasKey('__array');
export const isArrayString = _.allOf([isString, makeEndsWith('[]')]);

export const isStringLiteralUnion = _.allOf([
	isArray,
	_.every(_.anyOf([
		_.is('undefined'),
		isStringLiteral
	]))
]);
*/

const getParamInfo = valuesWith(
	(paramType, name) => ({
		name,
		type: paramType,
		required: is_required(paramType),
		displayText: JSON.stringify(paramType, null, 2) // getDisplayType(paramType),
	})
);

/*
const revealTypeWith = defaults => _.pipe([
	_.pull(defaults),
	_.when(hasIterableLength1, _.head)
]);
const revealType = revealTypeWith(['undefined']);

export const extractBaseType = _.when(isArray, revealType);
*/

export const getTypings = _.pipe([
	getParamInfo,
	_.sortWith([_.getKey('required')])
]);

const mergeDocs = (info, docs) =>
	info.map(makeMergeAppliedFnMap({
		documentation: param => docs[param.name]
	}));

export function getParamsByAgg (aggId, fieldType) {
	const computedParams = aggParamsShapeByFieldtypeByAggId[fieldType][aggId];
	const info = getParamInfo(computedParams);
	const docs = aggParamDocByAggId[aggId];

	return mergeDocs(info, docs);
}

export function getAggParamDefaultValue (aggregation, dataset, field, type, parameter) {
	if (!(aggregation in aggParamsDefaults)) {
		return undefined;
	}
	const agg = aggParamsDefaults[aggregation];
	if (!(parameter in agg)) {
		return undefined;
	}
	const defaultValue = agg[parameter]
	if (typeof defaultValue !== 'function') {
		return defaultValue;
	}
	const computedValue = defaultValue(dataset, field, type);
	if (computedValue && computedValue.then && typeof computedValue.then === 'function') {
		// TODO wait until promise resolution
	} else {
		return computedValue;
	}
	return undefined;
}

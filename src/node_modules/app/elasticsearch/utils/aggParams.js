import * as _ from 'lamb';
import {
	makeMergeAppliedFnMap,
	makeStartsWith,
	valuesWith,
} from '@svizzle/utils';

import {
	is_required
} from 'app/elasticsearch/types/esTypes/params.utils';

import aggParamsShapeByFieldtypeByAggId from 'app/elasticsearch/config/aggParamsShapeByFieldtypeByAggId.js';
import aggParamDocByAggId from 'app/elasticsearch/config/aggParamDocByAggId';

const getParamInfo = valuesWith(
	(paramType, name) => ({
		name,
		type: paramType,
		required: is_required(paramType),
		displayText: JSON.stringify(paramType, null, 2)
	})
);

const isOneOf = _.curry(_.isIn);

export const getTypings = _.pipe([
	getParamInfo,
	_.filterWith(_.not(_.pipe([
		_.getKey('name'),
		isOneOf(['__shape', '__default', '__optional', '__type', '__isAppDefault'])
	]))),
	_.sortWith([_.not(_.getKey('required'))])
]);

const mergeDocs = (info, docs) =>
	info.map(makeMergeAppliedFnMap({
		documentation: param => docs[param.name]
	}));

export function getParamsByAgg (aggId, fieldType) {
	const aggParameters = aggParamsShapeByFieldtypeByAggId[fieldType][aggId];
	const info = getTypings(aggParameters);
	const docs = aggParamDocByAggId[aggId];

	return mergeDocs(info, docs);
}

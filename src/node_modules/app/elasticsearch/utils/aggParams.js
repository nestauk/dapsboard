import * as _ from 'lamb';
import {
	makeMergeAppliedFnMap,
	valuesWith,
} from '@svizzle/utils';
import {isOneOf} from 'app/utils/generic';
import {typeKey, shapeKey} from 'app/elasticsearch/types/genericTypes';
import {optionalKey} from 'app/elasticsearch/types/esTypes/params';

import {is_required} from 'app/elasticsearch/types/esTypes/params.utils';

const getParamInfo = valuesWith(
	(paramType, name) => ({
		name,
		type: paramType,
		required: is_required(paramType),
		displayText: JSON.stringify(paramType, null, 2)
	})
);

export const getTypings = _.pipe([
	getParamInfo,
	_.filterWith(_.not(_.pipe([
		_.getKey('name'),
		isOneOf([typeKey, shapeKey, optionalKey, '__default', '__isAppDefault'])
	]))),
	_.sortWith([_.not(_.getKey('required'))])
]);

export const mergeDocs = (typings, docs) =>
	typings.map(makeMergeAppliedFnMap({
		documentation: param => docs[param.name]
	}));

import * as _ from 'lamb';
import {
	isArray,
	isString,
	hasIterableLength1,
	makeStartsWith
} from '@svizzle/utils'

import {
	aggsByType,
	defaultValues,
	paramsByAggs
} from './config';

export function getESType (field) {
	if (typeof field === 'string') {
		return field;
	}

	if (typeof field === 'object') {
		if ('es_type' in field) {
			return field.es_type;
		}
		if ('data_type' in field) {
			return field.data_type;
		}
		if ('type' in field) {
			return field.type;
		}

		// TODO: Should we throw or simply return 'object'?
		// throw new Error('Bad type specification');
	}

	return 'object';
}

const makePullAndReveal = defaults => _.pipe([
	_.pull(defaults),
	_.when(hasIterableLength1, _.head)
]);
const pullUndefinedAndSimplify = makePullAndReveal(['undefined']);
export const extractBaseType = _.when(isArray, pullUndefinedAndSimplify);

const isStringLiteral = _.allOf([isString, makeStartsWith('"')]);
export const isStringLiteralUnion = _.allOf([
	isArray,
	_.every(_.anyOf([
		_.is('undefined'),
		isStringLiteral
	]))
]);

export function computePresentationType (fullType, indentation = 0) {
	if (typeof fullType === 'string') {
		return fullType;
	}
	if (Array.isArray(fullType)) {
		return fullType
		.filter(type => type !== 'undefined')
		.map(type => computePresentationType(type, indentation + 1))
		.join(' | ');
	}
	if (typeof fullType === 'object') {
		if ('__array' in fullType) {
			return `${computePresentationType(fullType.__array, indentation + 1)}[]`;
		}
		if ('__legacyName' in fullType) {
			return fullType.__legacyName;
		}
		const paramNames = Object.keys(fullType);
		const result = paramNames
		.map(name => {
			return `${'\t'.repeat(indentation)}${name}: ${computePresentationType(fullType[name], indentation + 1)};`;
		})
		.join('\n');
		return ['{\n', result, '\n', '\t'.repeat(indentation >= 1 ? indentation - 1 : 0), '}'].join('');
	}
	throw new Error('Failed to parse type data, bad type.');
}

export function computeParamInfo (params) {
	const paramNames = Object.keys(params);
	return paramNames.map(name => {
		const paramType = params[name];
		const required = !(Array.isArray(paramType) && paramType.includes('undefined'));
		let presentationType = computePresentationType(paramType);
		return {
			name,
			type: paramType,
			required,
			displayText: presentationType,
			documentation: ['']
		}
	});
}

export function getParamsByAgg (agg, type) {
	if (!(agg in paramsByAggs)) {
		throw new Error('Invalid aggregation!');
	}
	const params = paramsByAggs[agg];
	const computedParams = typeof params === 'function'
		? params(type)
		: params;
	return computeParamInfo(computedParams);
}

const hasKeywordField = _.anyOf([
	_.is('ES_text_w_keyword'),
	_.is('ES_text_w_keyword[]'),
]);

const createKeywordFieldQuery = fieldName => ({field: `${fieldName}.keyword`});

function defaultAggregationFactory (fieldName, fieldInfo) {
	const fieldType = getESType(fieldInfo);
	if (hasKeywordField(fieldType)) {
		return createKeywordFieldQuery(fieldName);
	}
	return { field: fieldName };
}

const queryFactories = {
	composite: () => ({}),
	filter: () => ({}),
	filters: () => ({}),
	sampler: () => ({}),
	// eslint-disable-next-line no-unused-vars
	weighted_avg: () => ({})
}

export function buildAggregation (aggregation, fieldName, fieldInfo) {
	if (aggregation in queryFactories) {
		return queryFactories[aggregation](fieldName, fieldInfo);
	}

	return defaultAggregationFactory(fieldName, fieldInfo);
}

export function constructQuery (schema) {
	const aggs = {};
	for (let f in schema) {
		const fType = getESType(schema[f]);
		const typeAggs = aggsByType[fType];
		for (let i in typeAggs) {
			const at = typeAggs[i];
			const atName = `${f}_${at}`;
			aggs[atName] = {
				[at]: buildAggregation(at, f, schema[f])
			};
		}
	}

	return {
		size: 0,
		aggs
	};
}

export function getDefaultValue (aggregation, dataset, field, type, parameter) {
	if (!(aggregation in defaultValues)) {
		return undefined;
	}
	const agg = defaultValues[aggregation]
	if (!(parameter in agg)) {
		return undefined;
	}
	const defaultValue = agg[parameter]
	if (typeof defaultValue !== 'function') {
		return defaultValue;
	}
	const computedValue = defaultValue(dataset, field, type);
	if (computedValue && computedValue.then && typeof computedValue.then === 'function') {
		// TODO wait until promise resolution
	} else {
		return computedValue;
	}
	return undefined;
}

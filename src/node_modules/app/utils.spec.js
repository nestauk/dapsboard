import assert from 'assert';
import { makeIntermediateObj } from './utils';

describe('machines/builder/_options.js', function () {

	describe('#parseURL() - Histogram', function () {
		it('should correctly parse a single aggregations', function () {
			const urlObj = {
				aggs: {
					primary: {
						histogram: {
							field: 'year_fiscal_funding',
							interval: 2,
							min_doc_count: 1
						}
					}
				},
				size: 0
			};
			const expected = {
				size: 0,
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						},
						subaggs: undefined
					}
				]
			};
			const actual = makeIntermediateObj(urlObj);

			assert.deepStrictEqual(actual, expected);
		});
	});

	describe('#parseURL() - Nested Histograms', function () {
		it('should correctly parse a one level nested aggregation', function () {
			const urlObj = {
				size: 0,
				aggs: {
					primary: {
						histogram: {
							field: 'year_fiscal_funding',
							interval: 2,
							min_doc_count: 1
						},
						aggs: {
							secondary: {
								histogram: {
									field: 'cost_total_project',
									interval: 1000000,
									min_doc_count: 1
								}
							}
						}
					}
				}
			};
			const expected = {
				size: 0,
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						},
						subaggs: ['secondary']
					},
					{
						name: 'secondary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 1000000,
							min_doc_count: 1
						},
						subaggs: undefined
					}
				]
			};
			const actual = makeIntermediateObj(urlObj);

			assert.deepStrictEqual(actual, expected);
		});
	});

	describe('#parseURL() - Triple nested Histograms', function () {
		it('should correctly parse a two level nested aggregation', function () {
			const urlObj = {
				size:0,
				aggs: {
					primary: {
						histogram: {
							field: 'year_fiscal_funding',
							interval:2,
							min_doc_count: 1
						},
						aggs: {
							secondary: {
								histogram:{
									field: 'cost_total_project',
									interval: 1000000,
									min_doc_count: 1
								},
								aggs:{
									tertiary:{
										histogram:{
											field: 'cost_total_project',
											interval: 100000
										}
									}
								}
							}
						}
					}
				}
			};
			const expected = {
				size: 0,
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						},
						subaggs: ['secondary']
					},
					{
						name: 'secondary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 1000000,
							min_doc_count: 1
						},
						subaggs: ['tertiary']
					},
					{
						name: 'tertiary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 100000
						},
						subaggs: undefined
					}
				]
			};
			const actual = makeIntermediateObj(urlObj);

			assert.deepStrictEqual(actual, expected);
		});
	});
});

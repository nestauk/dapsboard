// eslint-disable-next-line node/no-unpublished-import
import { get } from 'svelte/store';
// eslint-disable-next-line node/no-unpublished-import
import { assign } from 'xstate';

import {
	aggregations,
	datasets,
	fields,
	types,
	fieldNames,
} from 'app/machines/builder/dictionaries';
import DATASETS from 'app/data/datasets.json';
import {
	metricLabels,
	bucketLabels,
} from 'app/elasticsearch/config';
import { spawnNestedForm, deleteNestedForms } from './_options';
import { request } from 'app/net';
import {
	getEndpointURL,
	getSchema
} from 'app/utils';
import { buildAggregation } from 'app/elasticsearch';
import { getCompletions } from 'app/tsservices';

function setSelection (ctx, event) {
	ctx.selection.set({
		...get(ctx.selection),
		...event.selection
	});
	if (event.dataset !== undefined) {
		ctx.dataset.set(event.dataset);
	}
	return ctx;
}

const isMissing = (key, value) => obj => Boolean(obj)
	&& !obj[key].has(value);

function computeLists (ctx) {
	const nextSelection = get(ctx.selection);
	const dataset = get(ctx.dataset);
	const typeDicts = types[nextSelection.type];
	const fieldDicts = fields[nextSelection.field];
	const datasetDicts = dataset
		&& datasets[DATASETS[dataset].id];
	const aggDicts = aggregations[nextSelection.aggregation];

	ctx.bucketOptions.set(Object.keys(bucketLabels).map(agg => ({
		text: bucketLabels[agg],
		value: agg,
		disabled: [typeDicts, datasetDicts, fieldDicts]
		.some(isMissing('aggregations', agg))
	})));
	ctx.metricOptions.set(Object.keys(metricLabels).map(agg => ({
		text: metricLabels[agg],
		value: agg,
		disabled: [typeDicts, datasetDicts, fieldDicts]
		.some(isMissing('aggregations', agg))
	})));
	ctx.typeOptions.set(Object.keys(types).map(type => ({
		text: type,
		value: type,
		disabled: false,
		effaced: [aggDicts, datasetDicts, fieldDicts]
		.some(isMissing('types', type))
	})));
	ctx.datasetOptions.set(DATASETS.map((dset, index) => ({
		text: dset.id,
		value: index,
		disabled: [typeDicts, fieldDicts, aggDicts]
		.some(isMissing('datasets', dset.id))
	})));
	ctx.fieldOptions.set(fieldNames.map(field => ({
		text: field,
		value: field,
		disabled:
			!dataset
			|| [typeDicts, datasetDicts, aggDicts]
			.some(isMissing('fields', field))
	})));
	return ctx;
}

// Storing the DSL globally as it can be shared safely among instances.
let datasetTypings;

async function loadDSL () {
	if (!datasetTypings) {
		datasetTypings = await request(
			'GET',
			'dsl/datasets.ts',
			{type:'text'}
		);
	}
}

function computeTypings (ctx) {
	const selection = get(ctx.selection)
	const dataset = get(ctx.dataset);
	if (window.ts) {
		const fieldInfo = getSchema(DATASETS[dataset])[selection.field];
		const agg = buildAggregation(
			selection.aggregation,
			selection.field,
			fieldInfo
		);
		const template = {
			[ctx.id]: {
				[selection.aggregation]: agg
			}
		};
		const ds = DATASETS[dataset].id;
		const code = `
			const selection: Aggs<${ds}, '${selection.field}'> =
				${JSON.stringify(template)};
		`;
		const fullCode = datasetTypings + code;
		const completions = getCompletions(
			fullCode,
			fullCode.lastIndexOf('{') + 1
		).sort((a, b) => b.required - a.required);
		ctx.completions.set(completions);
	}
	return ctx;
}

function computeRequestInternal (
	ctx,
	arrayIndex,
	dataset,
	subresults
) {
	const form = get(ctx.forms)[arrayIndex];
	const machine = get(form.machine);

	const name = machine.context.id;
	const selection = get(machine.context.selection);
	const extendedParams = get(machine.context.params);
	const completions = get(machine.context.completions);

	const fieldInfo = getSchema(DATASETS[dataset])[selection.field];

	const basicParams = buildAggregation(
		selection.aggregation,
		selection.field,
		fieldInfo
	);
	const agg = {
		[selection.aggregation]: {
			...basicParams,
			...extendedParams
		}
	};
	let isRequiredSet = true;
	if (subresults) {
		agg.aggs = subresults.query;
		isRequiredSet = isRequiredSet && subresults.isRequiredSet;
	}
	const query = {
		[name]: agg
	};
	const result = {
		isRequiredSet: isRequiredSet && completions.every(c =>
			c.name === 'field'
			|| (!c.required
				|| extendedParams[c.name] !== undefined
				&& extendedParams[c.name] !== null
			)
		),
		query,
	};
	if (arrayIndex === 0) {
		return result;
	}
	return computeRequestInternal(
		ctx,
		arrayIndex - 1,
		dataset,
		result
	);
}

function computeRequest (ctx) {
	ctx.readyForRequest.set(false);
	const dataset = get(ctx.dataset);
	const computedRequest = computeRequestInternal(
		ctx,
		ctx.arrayIndex,
		dataset
	);
	ctx.computedQuery.set({
		size: get(ctx.resultSize),
		aggs: computedRequest.query
	});
	// TODO compute query from parents here
	ctx.readyForRequest.set(computedRequest.isRequiredSet);
	const endpoint = getEndpointURL(DATASETS[dataset]);
	ctx.url = `${endpoint}/_search`;

	return ctx;
}

function getQuery (ctx) {
	return get(ctx.selectedRequestTab) === 'fields'
		? get(ctx.computedQuery)
		: get(ctx.parsedQuery);
}

function computeCacheKey (ctx) {
	ctx.cacheKey = `${ctx.url}/${JSON.stringify(getQuery(ctx))}`;
	return ctx;
}

function setQuery (ctx, event) {
	// merge
	const params = {
		...get(ctx.params),
		...event.params
	};
	// delete nulled parameters
	Object.keys(params).forEach(k => {
		params[k] === null && delete params[k]
	});
	ctx.params.set(params);
	if (event.resultSize !== undefined) {
		ctx.resultSize.set(event.resultSize);
		console.log('setting size')
	}
	return ctx;
}

function setJSON (ctx, event) {
	console.log('setting json')
	ctx.parsedQuery.set(event.json);
	return ctx;
}

function clearTypings (ctx) {
	ctx.completions.set([]);
	return ctx;
}

function clearQuery (ctx) {
	ctx.params.set({});
	ctx.computedQuery.set({});
	return ctx;
}

// Storing the cache globally as it can be shared safely among instances.
const cache = {};
function doQuery (ctx) {
	ctx.response.set(null);
	return request('POST', ctx.url, {data: getQuery(ctx)});
}

function isInCache (ctx) {
	return ctx.cacheKey in cache;
}

function isMatching (ctx) {
	console.log('isMatching',getQuery(ctx));
	console.log(ctx.cacheKey)
	console.log(`${ctx.url}/${JSON.stringify(getQuery(ctx))}`)
	console.log(ctx.cacheKey === `${ctx.url}/${JSON.stringify(getQuery(ctx))}`)
	return ctx.cacheKey === `${ctx.url}/${JSON.stringify(getQuery(ctx))}`;
}

function loadFromCache (ctx) {
	ctx.response.set(cache[ctx.cacheKey]);
	return ctx;
}

function storeInCache (ctx, event) {
	cache[ctx.cacheKey] = event.data;
	return ctx;
}

function setResponse (ctx, event) {
	ctx.response.set(event.data)
	return ctx;
}

export const formOptions = {
	actions: {
		/**
		 * Updates stores to reflect current aggregation parts selection
		 */
		setSelection: assign(setSelection),
		/**
		 * Creates a new form for configuring a subaggregation
		 */
		spawnNestedForm: assign(spawnNestedForm),
		/**
		 * Compute the lists of selectable choices for configuring the query.
		 */
		computeLists: assign(computeLists),
		computeTypings: assign(computeTypings),
		computeRequest: assign(computeRequest),
		computeCacheKey: assign(computeCacheKey),
		setQuery: assign(setQuery),
		clearTypings: assign(clearTypings),
		clearQuery: assign(clearQuery),
		loadDSL: assign(loadDSL),
		setResponse: assign(setResponse),
		storeInCache: assign(storeInCache),
		loadFromCache: assign(loadFromCache),
		deleteNestedForms: assign(deleteNestedForms),
		setJSON: assign(setJSON)
	},
	guards: {
		isAutoExecute: ctx => get(ctx.runQueryOnSelect),
		isInCache,
		isMatching,
		isSelectionComplete: ({selection, dataset}) => {
			// console.log('guard', selection)
			const sel = get(selection);
			return sel.aggregation !== null
				&& get(dataset) !== null
				&& sel.field !== null;
		},
		isQueryReady: ctx => get(ctx.readyForRequest)
	},
	services: {
		apiRequest: ctx => doQuery(ctx)
	}
};

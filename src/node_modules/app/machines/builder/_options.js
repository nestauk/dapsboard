// eslint-disable-next-line node/no-unpublished-import
import { get } from 'svelte/store';
// eslint-disable-next-line node/no-unpublished-import
import { spawn } from 'xstate';
// eslint-disable-next-line node/no-extraneous-import
import {capitalise} from 'svizzle/utils/string-string';

import { createFormStores } from './form.context';
import { createFormMachine } from './form';

const AXIS_NAMES = [
	'primary',
	'secondary',
	'tertiary',
	'quaternary',
	'quinary',
	'senary',
	'septenary',
	'octonary',
	'nonary',
	'denary'
];

export function spawnNestedForm (ctx) {
	const forms = get(ctx.forms);
	const arrayIndex = forms.length
	const selectedForm = get(ctx.selectedForm);
	if (!selectedForm || selectedForm.value + 1 === arrayIndex) {
		const nextName = AXIS_NAMES[arrayIndex];
		const {machine: formTemplate} = createFormMachine({
			...ctx,
			id: nextName,
			arrayIndex,
			...createFormStores(),
		});
		const spawned = spawn(formTemplate, nextName);
		const newForm = {
			name: nextName,
			text: capitalise(nextName),
			value: arrayIndex,
			disabled: false,
			machine: spawned,
		};
		newForm.unsubscribe = spawned.subscribe(() => undefined);
		ctx.forms.set([
			...forms,
			newForm
		]);
	}
}

export function deleteNestedForms (ctx, event) {
	const forms = get(ctx.forms);
	const index = event.formId || ctx.arrayIndex;
	if (index === undefined) {
		return ctx;
	}
	const formsToStop = forms.slice(index + 1);
	formsToStop.forEach(f => f.unsubscribe());
	const newFormsArray = forms.slice(0, index + 1);
	ctx.forms.set(newFormsArray);
	return ctx;
}

export function selectForm (ctx, event) {
	const forms = get(ctx.forms);
	const form = event.form || forms[forms.length - 1];
	ctx.selectedForm.set(form);
	return ctx;
}

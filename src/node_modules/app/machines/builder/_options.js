// eslint-disable-next-line node/no-unpublished-import
import { get } from 'svelte/store';
// eslint-disable-next-line node/no-unpublished-import
import { spawn } from 'xstate';
// eslint-disable-next-line node/no-extraneous-import
import {capitalise} from 'svizzle/utils/string-string';

import { createFormMachine } from './form';

const AXIS_NAMES = [
	'primary',
	'secondary',
	'tertiary',
	'quaternary',
	'quinary',
	'senary',
	'septenary',
	'octonary',
	'nonary',
	'denary'
];

export function spawnNestedForm (ctx) {
	const forms = get(ctx.forms);

	const selectedForm = get(ctx.selectedForm);
	if (!selectedForm || selectedForm.value + 1 === forms.length) {
		const nextName = AXIS_NAMES[forms.length];
		const {machine: formTemplate} = createFormMachine({
			...ctx,
			selection: {
				aggregation: null,
				type: null,
				field: null,
			},
			params: {},
			query: {},
			id: nextName
		});
		const spawned = spawn(formTemplate, nextName);
		const newForm = {
			name: nextName,
			text: capitalise(nextName),
			value: forms.length,
			disabled: false,
			machine: spawned,
			selection: {}
		};
		newForm.unsubscribe = spawned.subscribe(v => {
			newForm.selection = v.context.selection;
			newForm.params = v.context.params;
			newForm.cacheKey = v.context.cacheKey;
			// newForm.
		});

		ctx.forms.set([
			...forms,
			newForm
		]);

	}
}
/*
function deleteLastForm (ctx) {
	const forms = get(ctx.forms);
}
export function deleteUnusedNestedForms (ctx, event) {
	const forms = get(ctx.forms);
	const selectedForm = forms.find(f => ctx.id === f.name);

	if (!selectedForm || selectedForm.value + 1 === forms.length) {

	}
	return ctx;
}
*/
export function selectForm (ctx, event) {
	// console.log('form selected')
	// const form1 = get(ctx.selectedForm);
	const forms = get(ctx.forms);
	const form = event.form || forms[forms.length - 1];
	ctx.selectedForm.set(form);
	form.machine.send('FORM_ACTIVATING');
	return ctx;
}

export function resetForm (ctx, event) {
	const forms = get(ctx.forms);
	const index = event.formId;
	const formsToStop = forms.slice(index + 1);
	formsToStop.forEach(f => f.unsubscribe());
	const newFormsArray = forms.slice(0, index + 1);
	ctx.forms.set(newFormsArray);
	let newCtx = ctx;
	if (newFormsArray.length === 0) {
		const activeSelection = get(ctx.activeSelection);
		activeSelection.dataset = null;
		ctx.activeSelection.set(activeSelection);
		newCtx = spawnNestedForm(newCtx);
	}
	if (newFormsArray.length < get(ctx.selectedForm).value + 1) {
		newCtx = selectForm(newCtx);
	}
	return newCtx;
}

/*
// eslint-disable-next-line node/no-unpublished-import
import * as _ from 'lamb';
*/
// eslint-disable-next-line node/no-unpublished-import
import { get } from 'svelte/store';
// eslint-disable-next-line node/no-unpublished-import
import { spawn } from 'xstate';
// eslint-disable-next-line node/no-extraneous-import
import { capitalise } from 'svizzle/utils/string-string';

import { makeIntermediateObj } from 'app/utils';
import { createFormStores } from './form.context';
import { createFormMachine } from './form';

const AXIS_NAMES = [
	'primary',
	'secondary',
	'tertiary',
	'quaternary',
	'quinary',
	'senary',
	'septenary',
	'octonary',
	'nonary',
	'denary'
];

function createForm (ctx, id, arrayIndex) {
	const {machine: formTemplate} = createFormMachine({
		...ctx,
		id,
		arrayIndex,
		...createFormStores(),
	});
	const spawned = spawn(formTemplate, id);
	const newForm = {
		text: capitalise(id),
		value: arrayIndex,
		disabled: false,
		machine: spawned,
	};
	newForm.unsubscribe = spawned.subscribe(() => undefined);
	return newForm;
}

export function spawnNestedForm (ctx) {
	console.log('adding form')
	const forms = get(ctx.forms);
	const arrayIndex = forms.length
	const selectedForm = get(ctx.selectedForm);
	if (!selectedForm || selectedForm.value + 1 === arrayIndex) {
		const nextName = AXIS_NAMES[arrayIndex];
		ctx.forms.set([
			...forms,
			createForm(ctx, nextName, arrayIndex)
		]);
	}
}

export function deleteNestedForms (ctx, event) {
	const forms = get(ctx.forms);
	let index = event.formId;
	if (typeof index !== 'number') {
		index = ctx.arrayIndex;
	}
	// const index = event.formId || ctx.arrayIndex;
	if (index === undefined) {
		return ctx;
	}
	const formsToStop = forms.slice(index + 1);
	formsToStop.forEach(f => f.unsubscribe());
	const newFormsArray = forms.slice(0, index + 1);
	ctx.forms.set(newFormsArray);
	return ctx;
}

export function selectForm (ctx, event) {
	const forms = get(ctx.forms);
	const form = event.form || forms[forms.length - 1];
	ctx.selectedForm.set(form);
	return ctx;
}

export function resetForms (ctx) {
	const forms = get(ctx.forms);
	forms.forEach(f => f.unsubscribe());
	ctx.selectedForm.set(undefined);
	ctx.forms.set([]);
	return ctx;
}

export function parseParams (ctx, event) {
	ctx.datasetTypings = event.datasetTypings;
	spawnNestedForm(ctx);
	selectForm(ctx, {});
	if (event.dataset) {
		ctx.dataset.set(event.dataset);
		if (event.query) {
			const obj = makeIntermediateObj({...event.query});
			ctx.resultSize.set(obj.size);
			obj.aggs.forEach(a => {
				const forms = get(ctx.forms);
				const newForm = forms[forms.length - 1]
				ctx.selectedForm.set(newForm);
				newForm.text = capitalise(a.name);
				newForm.machine.send('RENAME', {
					name: a.name
				})
				newForm.machine.send('SELECTION_CHANGED', {
					selection: {
						aggregation: a.aggregation,
						field: a.field,
					}
				});
				if (Object.keys(a.params).length > 0) {
					newForm.machine.send('QUERY_CHANGED',{
						params: a.params
					})
				}
			})
		}
	}
	return ctx;
}

import assert from 'assert';
import { parseURL } from './_options';

describe('machines/builder/_options.js', function () {
	describe('#parseURL() - Histogram', function () {
		it('should ...', function () {
			const ctx = {};
			const event = {
				dataset: 'mosaic_nih_v7',
				query: {
					aggs: {
						primary: {
							histogram: {
								field: 'year_fiscal_funding',
								interval: 2,
								min_doc_count: 1
							}
						}
					},
					size: 0
				}
			};
			parseURL(ctx, event);

			assert.equal(ctx.parseResult, {
				resultSize: 0,
				dataset: 'mosaic_nih_v7',
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						}
					}
				]
			});
		});
	});
});

describe('machines/builder/_options.js', function () {
	describe('#parseURL() - Nested Histograms', function () {
		it('should ...', function () {
			const ctx = {};
			const event = {
				dataset: 'mosaic_nih_v7',
				query: {
					size: 0,
					aggs: {
						primary: {
							histogram: {
								field: 'year_fiscal_funding',
								interval: 2,
								min_doc_count: 1
							},
							aggs: {
								secondary: {
									histogram: {
										field: 'cost_total_project',
										interval: 1000000,
										min_doc_count: 1
									}
								}
							}
						}
					}
				}
			};
			parseURL(ctx, event);

			assert.equal(ctx.parseResult, {
				resultSize: 0,
				dataset: 'mosaic_nih_v7',
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						},
						aggs: ['secondary']
					},
					{
						name: 'secondary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 1000000,
							min_doc_count: 1
						},
						aggs: null
					}
				]
			});
		});
	});
});

describe('machines/builder/_options.js', function () {
	describe('#parseURL() - Triple nested Histograms', function () {
		it('should ...', function () {
			const ctx = {};
			const event = {
				dataset: 'mosaic_nih_v7',
				query: {
					size:0,
					aggs:{
						primary:{
							histogram: {
								field: 'year_fiscal_funding',
								interval:2,
								min_doc_count: 1
							},
							aggs:{
								secondary:{
									histogram:{
										field: 'cost_total_project',
										interval: 1000000,
										min_doc_count: 1
									}
								},
								aggs:{
									tertiary:{
										histogram:{
											field: 'cost_total_project',
											interval: 100000
										}
									}
								}
							}
						}
					}
				}
			};
			parseURL(ctx, event);

			assert.equal(ctx.parseResult, {
				resultSize: 0,
				dataset: 'mosaic_nih_v7',
				aggs: [
					{
						name: 'primary',
						aggregation: 'histogram',
						field: 'year_fiscal_funding',
						params: {
							interval: 2,
							min_doc_count: 1
						},
						aggs: ['secondary']
					},
					{
						name: 'secondary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 1000000,
							min_doc_count: 1
						},
						aggs: ['tertiary']
					},
					{
						name: 'tertiary',
						aggregation: 'histogram',
						field: 'cost_total_project',
						params: {
							interval: 100000
						},
						aggs: null
					}
				]
			});
		});
	});
});
